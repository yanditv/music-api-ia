#!/usr/bin/env python3
"""
Test completo de la API con ejemplos reales
"""

import requests
import json
import time

def test_api_with_examples():
    """Probar la API con ejemplos de canciones, poemas y narrativa"""
    
    base_url = "http://localhost:8000"
    
    # Ejemplos para probar
    examples = [
        {
            "name": "Canci√≥n Folk",
            "text": """En el camino encontr√©
una rosa que brillaba
En el camino encontr√©
el amor que me esperaba

Oh, oh, dulce melod√≠a
que llena mi coraz√≥n
Oh, oh, dulce melod√≠a
de nuestra canci√≥n""",
            "expected_type": "song"
        },
        {
            "name": "Poema Rom√°ntico", 
            "text": """En tus ojos veo el cielo
en tu sonrisa la luz
En tu alma encuentro consuelo
en tu amor mi juventud""",
            "expected_type": "poem"
        },
        {
            "name": "Canci√≥n Pop",
            "text": """Yeah, yeah, vamos a bailar
la noche es para so√±ar
Yeah, yeah, vamos a bailar
nunca nos vamos a parar

La la la la
Na na na na
Siente el beat
mueve los pies""",
            "expected_type": "song"
        }
    ]
    
    print("üß™ Test Completo de la API Bark")
    print("=" * 50)
    
    # Verificar que el servidor est√© corriendo
    try:
        response = requests.get(f"{base_url}/voices")
        if response.status_code != 200:
            print("‚ùå El servidor no est√° corriendo. Inicia primero: python start.py")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor. Inicia primero: python start.py")
        return
    
    print("‚úÖ Servidor conectado correctamente")
    
    for example in examples:
        print(f"\nüéØ Probando: {example['name']}")
        print(f"   Texto: {example['text'][:50]}...")
        
        # 1. Analizar el texto
        try:
            analyze_response = requests.post(
                f"{base_url}/analyze-text/",
                json={"text": example["text"]}
            )
            
            if analyze_response.status_code == 200:
                analysis = analyze_response.json()
                detected_type = analysis["analysis"]["type"]
                is_song = analysis["analysis"]["is_song"]
                
                status = "‚úÖ" if detected_type == example["expected_type"] else "‚ùå"
                print(f"   {status} Detectado como: {detected_type}")
                print(f"   üìä Es canci√≥n: {is_song}")
                print(f"   üé§ Voz sugerida: {analysis['analysis']['suggested_voice']}")
                print(f"   üéµ M√∫sica sugerida: {analysis['analysis']['suggested_music_style']}")
                
                # 2. Generar audio con procesamiento inteligente
                smart_response = requests.post(
                    f"{base_url}/smart-generate/",
                    json={
                        "text": example["text"],
                        "voice": analysis["analysis"]["suggested_voice"]
                    }
                )
                
                if smart_response.status_code == 200:
                    result = smart_response.json()
                    print(f"   üéß Audio generado: {result['file_id']}")
                    print(f"   üìù Texto procesado: {result['processed_text'][:80]}...")
                else:
                    print(f"   ‚ùå Error generando audio: {smart_response.status_code}")
                    
            else:
                print(f"   ‚ùå Error analizando texto: {analyze_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Error: {str(e)}")
    
    print("\n" + "=" * 50)
    print("‚úÖ Test completado")
    print("üí° Tips:")
    print("   - Verifica los resultados en http://localhost:8000/docs")
    print("   - Prueba m√°s ejemplos en http://localhost:8000/music-examples")

if __name__ == "__main__":
    test_api_with_examples()
